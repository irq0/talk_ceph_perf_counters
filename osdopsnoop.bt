// Trace OSD Operations (handle nested call ops)
#define CEPH_OSD_OP_CALL 5121
usdt:*:osd:do_osd_op_pre /@in_call[tid].0 == 0/ {
  @start[tid] = nsecs;
  printf("[%d | %s] BEGIN oid:%s op:%s(%d)\n", tid, comm, str(arg0), str(arg3), arg2);
}

usdt:*:osd:do_osd_op_pre_call {
  @in_call[tid] = (arg2, arg3);
  printf("[%d | %s] CALL  %s.%s\n", tid, comm, str(arg2), str(arg3));
}

usdt:*:osd:do_osd_op_pre_writesame,
usdt:*:osd:do_osd_op_pre_write {
  printf("[%d | %s] WRITE sz:%d ext:%d:%d \n", tid, comm, arg2, arg4, arg5);
}
usdt:*:osd:do_osd_op_pre_writefull {
  printf("[%d | %s] WRITE sz:%d ext:%d:%d (writefull)\n", tid, comm, arg2, arg3, arg4);
}

usdt:*:osd:do_osd_op_post /arg2 == CEPH_OSD_OP_CALL/ {
  @cls[str(@in_call[tid].0)] = hist((nsecs - @start[tid]) / 1000);
  delete(@in_call[tid]);
}

usdt:*:osd:do_osd_op_post /@in_call[tid].0 == 0/ {
  $elapsed = (nsecs - @start[tid]) / 1000;
  printf("[%d | %s] END   oid:%s op:%s(%d) result:%s(%d) elapsed:%dÂµs \n",
         tid, comm, str(arg0), str(arg3), arg2,
         strerror(arg5), arg5,
         $elapsed);
  @ops[str(arg3)] = hist($elapsed);
}
